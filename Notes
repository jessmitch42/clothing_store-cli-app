Steps taken (started Friday, November 17th):

- bundle gem install to create new gem template
- created repo "clothing_store-cli-app" (following Learn naming convention)
- small update to ReadMe to make sure repo is set up properly on GitHub and locally
- created lib/clothing_store/cli.rb and updated lib/clothing_store.rb so controller class is working (following the Learn video about this)
- updated bin/clothing_store and tested controller class to make sure the basics are working so far (they are! :) )

*** WATCH IF YOU'RE LOST ***
https://learn.co/tracks/full-stack-web-development-v3/object-oriented-ruby/final-projects/cli-data-gem-walkthrough

*** ANTI-PATTERNS VIDEO ***
1. don't "zip" info (separate arrays of data where values as certain indexes relate to same source--> should just be one object with attributes)
2. don't scrape site multiple times if you can get all the info you need the first time (if you're scraping jessmitchell.ca multiple times, refactor!)
3. class instance variable = weird (in a class method, having an @instance method that doesn't get "saved" properly)
4. don't have classes that never get properly instantiated
5. avoid hardcoded numbers when it can be made to vary. E.g. avoid using 10 instead of array.length in case the array changes
6. use "collect" instead of "each" if you're just pushing values into an array and returning that array (check if a method exists to simplify your code)
Basically, don't spread your data all over. Create classes to organize your data when needed.


*** TO-DO ***
[X] Watch this video walkthrough of building a CLI Gem called Daily Deal before you begin.
[X] Create a new repository on GitHub for your application, ie: name-cli-app.
[ ] When you create the CLI app for your assessment, add the spec.md file from this repo to the root directory of the project, commit it to Git and push it up to GitHub.
[ ] Build your application. Make sure to commit early and commit often. Commit messages should be meaningful (clearly describe what you're doing in the commit) and accurate (there should be nothing in the commit that doesn't match the description in the commit message). Good rule of thumb is to commit every 3-7 mins of actual coding time. Most of your commits should have under 15 lines of code and a 2 line commit is perfectly acceptable. This is important and you'll be graded on this.
[ ] Make sure to create a good README.md with a short description, install instructions, a contributors guide and a link to the license for your code.
[ ] While you're working on it, record a 30 min coding session with your favorite screen capture tool. During the session, either think out loud or not. It's up to you. You don't need to submit the video, but we may ask for it at a later time.
[ ] Make sure to check each box in your spec.md (replace the space between the square braces with an x) and explain next to each one how you've met the requirement before you submit your project.
[ ] Prepare a video demo (narration helps!) describing how a user would interact with your working gem.
[ ] Write a blog post about the project and process.
[ ] On Learn, submit links to the GitHub repository for your app, your video demo, and your blog post each to the corresponding textbox in the right rail, and hit "I'm done" to wrap it up.
